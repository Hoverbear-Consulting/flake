" Be a real editor
set nocompatible


filetype plugin on
syntax enable

set background=dark
colorscheme dogrun
" Enable true color
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif

set magic
set autoread
set history=700
set mouse=a
set number
au TermOpen * setlocal nonumber norelativenumber " No numbers in Terminal mode
set clipboard=unnamedplus

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif

" Hit escape to get out of a :terminal
tnoremap <Esc> <C-\><C-n>

" Searching
set ignorecase
set smartcase
set hlsearch
set incsearch

" Fix some junk
set nobackup
set nowb
set noswapfile
set nocompatible

" Improve smoothness
set ttyfast
" Don't redraw while executing macros
set lazyredraw
" Show partially typed commands at the bottom
set showcmd
" Show tab bar if there are at least two tabs
set showtabline=1

" Indents
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4
" set cursorcolumn
set cursorline

set ai " Auto Indent
set si " Smart Indent
set wrap

" Default fzf layout
let g:fzf_layout = { 'down': '40%' }
" Disable status for a cleaner look
if has('nvim') && !exists('g:fzf_layout')
    autocmd! FileType fzf
    autocmd  FileType fzf set laststatus=0 noshowmode noruler
                \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
endif
" Enable advanced ripgrep
function! RipgrepFzf(query, fullscreen)
    let command_fmt = 'rg --column --line-number --color=always --smart-case -- %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction
command! -nargs=* -bang Rg call RipgrepFzf(<q-args>, <bang>0)

" Ensure fzf exits with escape
augroup fzf
  autocmd!
  autocmd! FileType fzf
  autocmd  FileType fzf set laststatus=0 noshowmode noruler
    \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
augroup END

tnoremap <expr> <Esc> (&filetype == "fzf") ? "<Esc>" : "<c-\><c-n>"
if has("nvim")
  au TermOpen * tnoremap <buffer> <Esc> <c-\><c-n>
  au FileType fzf tunmap <buffer> <Esc>
endif

" Hotkeys
nnoremap <silent> <C-f> :Rg<CR>
nnoremap <silent> <C-g> :Files<CR>

let g:LanguageClient_serverCommands = {
            \ 'rust': ['rust-analyzer'],
            \ }

hi Normal guibg=NONE ctermbg=NONE
